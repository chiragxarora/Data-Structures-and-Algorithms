and => &
    0 & 0 = 0
    0 & 1 = 0
    1 & 0 = 0
    1 & 1 = 1

or => |
    0 | 0 = 0
    0 | 1 = 1
    1 | 0 = 1
    1 | 1 = 1

xor => ^
    0 ^ 0 = 0
    0 ^ 1 = 1    // returns 1 with odd number of 1s
    1 ^ 0 = 1
    1 ^ 1 = 0

**  a ^ a = 0  and  a ^ 0 = a

not => ~
    ~ 0 = 1
    ~ 1 = 0

left shift => <<
    N << i => left shifts the bits of N by i places and puts i zeros in the beginning
    5 << 1 => 5 is 00000101, left shift by 1 will remove one bit from the left and add a 0 to the right => 00001010
    => 5 << 1 = 00001010 which is 10;

** N << i => multiplying N by 2^i

right shift => >>
    N >> i => right shifts the bits of N by i places and puts i zeros in the beginning
    5 >> 1 => 5 is 00000101, right shift by 1 will remove one bit from the right and add a 0 to the left => 00000010
    => 5 >> 1 = 00000010 which is 2;

** N >> i => division N by 2^i

COMMON BIT TASKS

=> given a number n, its odd if rightmost bit is 1, even if rightmost bit is 0

5 => 101 => 1*(2^2) + 0*(2^1) + 1(2^0) => even + even + odd
** only last bit can provide an odd number, all other bits are powers of 2 and hence even
to check, take bitwise and with 1, n&1 == 1 => odd or n&1 == 0 => even

=> given a number n, get its ith bit

5 = 00000101, i = 2
5 >> i  =>  00000001
now take its & with 1

or

5 = 00000101, i = 2, 1 = 00000001
take 1 and left shift it i times
1 << i  =>  00000100
now take its & with 'n'
if > 0 => bit was 1
if == 0 => bit was 0

** bits which are one are called set bits

=> given a number n, set its ith bit

5 = 00000101, i = 2, 1 = 00000001
take 1 and left shift it i times
1 << i  =>  00000100
now take its bitwise or (|) with 'n'

=> given a number n, clear its ith bit

5 = 00000101, i = 2, 1 = 00000001
take 1 and left shift it i times
1 << i  =>  00000100
take its negation => ~ (1<<i) => 11111011
now take its bitwise and (&) with 'n'


=> given a number n, update its ith bit to v (v is also given)

5 = 00000101, i = 2, let v = 00000001
first clear the ith bit of the number
1 << i  =>  00000100
take its negation => ~ (1<<i) => 11111011 (this is our mask)
take v and left shift it i times
now take its bitwise or (|) with 'n'

=> counting set bits of an integer

Subtracting 1 from a decimal number flips all the bits
after the rightmost set bit(which is 1) including the rightmost set bit.

10 : 00001010 
9  : 00001001 
8  : 00001000 
7  : 00000111

So if we subtract a number by 1 and do it bitwise & with itself (n & (n-1)), we unset the rightmost set bit.
If we do n & (n-1) in a loop and count the number of times the loop executes, we get the set bit count. 




